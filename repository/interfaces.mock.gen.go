// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CountCoordinateTree mocks base method.
func (m *MockRepositoryInterface) CountCoordinateTree(ctx context.Context, input CountCoordinateTreeInput) (CountCoordinateTreeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCoordinateTree", ctx, input)
	ret0, _ := ret[0].(CountCoordinateTreeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCoordinateTree indicates an expected call of CountCoordinateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CountCoordinateTree(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCoordinateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CountCoordinateTree), ctx, input)
}

// CreateEstate mocks base method.
func (m *MockRepositoryInterface) CreateEstate(ctx context.Context, input CreateEstateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEstate(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEstate), ctx, input)
}

// CreateTree mocks base method.
func (m *MockRepositoryInterface) CreateTree(ctx context.Context, input CreateTreeInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTree", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTree indicates an expected call of CreateTree.
func (mr *MockRepositoryInterfaceMockRecorder) CreateTree(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTree", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateTree), ctx, input)
}

// GetEstateById mocks base method.
func (m *MockRepositoryInterface) GetEstateById(ctx context.Context, input GetEstateByIdInput) (GetEstateByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateById", ctx, input)
	ret0, _ := ret[0].(GetEstateByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateById indicates an expected call of GetEstateById.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateById), ctx, input)
}

// GetHeightEstateTrees mocks base method.
func (m *MockRepositoryInterface) GetHeightEstateTrees(ctx context.Context, input GetHeightEstateTreesInput) (GetHeightEstateTreesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeightEstateTrees", ctx, input)
	ret0, _ := ret[0].(GetHeightEstateTreesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeightEstateTrees indicates an expected call of GetHeightEstateTrees.
func (mr *MockRepositoryInterfaceMockRecorder) GetHeightEstateTrees(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeightEstateTrees", reflect.TypeOf((*MockRepositoryInterface)(nil).GetHeightEstateTrees), ctx, input)
}

// GetPrevNextTree mocks base method.
func (m *MockRepositoryInterface) GetPrevNextTree(ctx context.Context, input GetPrevNextTreeInput) (GetPrevNextTreeOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrevNextTree", ctx, input)
	ret0, _ := ret[0].(GetPrevNextTreeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrevNextTree indicates an expected call of GetPrevNextTree.
func (mr *MockRepositoryInterfaceMockRecorder) GetPrevNextTree(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrevNextTree", reflect.TypeOf((*MockRepositoryInterface)(nil).GetPrevNextTree), ctx, input)
}

// StoreMedianEstate mocks base method.
func (m *MockRepositoryInterface) StoreMedianEstate(ctx context.Context, input StoreMedianEstateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMedianEstate", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMedianEstate indicates an expected call of StoreMedianEstate.
func (mr *MockRepositoryInterfaceMockRecorder) StoreMedianEstate(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMedianEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).StoreMedianEstate), ctx, input)
}
